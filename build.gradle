import net.minecraftforge.gradle.tasks.user.reobf.ArtifactSpec

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.0.0-beta-2423'
    }
}

apply plugin: 'kotlin'
apply plugin: 'forge'

repositories{
    maven {
        url 'http://jitpack.io'
    }
    maven {
        name = "vault-repo"
        url = "http://nexus.theyeticave.net/content/repositories/pub_releases"
    }
    maven {
        name = "bukkit"
        url = "http://repo.bukkit.org/content/groups/public/"
    }
}

version = "0.0.2"
group= "ru.redenergy.report"
archivesBaseName = "qreport"

minecraft {
    version = "1.7.10-10.13.4.1564-1.7.10"
    runDir = "eclipse"
//    srgExtra "PK: kotlin ru/redenergy/report/repack/kotlin"
}


configurations {
    kotlin
    client
    server
    shade

    shade.extendsFrom(client, server)
    compile.extendsFrom shade, kotlin
}

dependencies {
    kotlin 'org.jetbrains.kotlin:kotlin-stdlib:1.0.0-beta-2423'
    kotlin 'org.jetbrains.kotlin:kotlin-runtime:1.0.0-beta-2423'
    kotlin 'com.github.FRedEnergy:Forgelin:-SNAPSHOT'
//    kotlin 'org.jetbrains.kotlin:kotlin-reflect:1.0.0-beta-2423'

    client 'com.github.FRedEnergy:rabbit-gui:v1.2.0:shaded'

    server 'com.github.FRedEnergy:forge-vault:c2d5527281'
    server 'com.j256.ormlite:ormlite-core:4.48'
    server 'com.j256.ormlite:ormlite-jdbc:4.48'
    server 'org.xerial:sqlite-jdbc:3.7.2'
    server 'mysql:mysql-connector-java:5.1.37'

    testCompile 'junit:junit:4.12'
}

jar {
    configurations.shade.each{ dep ->
        if(!dep.getName().contains("bukkit") && !dep.getName().contains("Forgelin")) {
            from(project.zipTree(dep)) {
                exclude 'META-ING', 'META-INF/**'
            }
        }
    }
    classifier = 'standalone'
}



task serverJar(type: Jar){
    from (sourceSets.main.output) {
        setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        exclude 'ru/redenergy/report/client/**'
    }
    configurations.server.each{ dep ->
        if(!dep.getName().contains("bukkit") && !dep.getName().contains("Forgelin")) {
            from(project.zipTree(dep)) {
                exclude 'META-ING', 'META-INF/**'
            }
        }
    }
    classifier = 'server'
}

task clientJar(type: Jar){
    from (sourceSets.main.output) {
        setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
        exclude 'ru/redenergy/report/server/**'
    }
    configurations.client.each{ dep ->
        if(!dep.getName().contains("Forgelin")) {
            from(project.zipTree(dep)) {
                exclude 'META-ING', 'META-INF/**'
            }
        }
    }
    classifier = 'client'
}

def action = new Action<net.minecraftforge.gradle.tasks.user.reobf.ArtifactSpec>(){
    void execute(ArtifactSpec artifactSpec) {
        artifactSpec.classpath = sourceSets.main.compileClasspath
    }
}
reobf.reobf(clientJar, action)
reobf.reobf(serverJar, action)

tasks.jar.dependsOn('serverJar', 'clientJar')

artifacts{
    jar
    serverJar
    clientJar
}

sourceSets {
    main {
        output.resourcesDir = output.classesDir
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

